<?php

namespace Application\Models;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-04-10 at 09:09:34.
 */
class DealerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Dealer
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Dealer;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Application\Models\Dealer::shuffleDeck
     * @todo   Implement testShuffleDeck().
     */
    public function testShuffleDeck() {
        $this->object->shuffleDeck();
    }

    /**
     * @covers Application\Models\Dealer::dealCard
     * @todo   Implement testShuffleDeck().
     */
    public function testDealCard() {
        $this->object->shuffleDeck();
        $card = $this->object->dealCard();
        
        $this->assertInstanceOf(\Application\Models\Card::class, $card);
        $this->assertNotEquals('Ace of Hearts', "$card");
    }
    
    /**
     * @covers Application\Models\Dealer::getDeck
     * @covers Application\Structures\CardContainer::getCount
     */
    public function testDeckNotDuplicated() {
        $this->assertEquals(0, $this->object->getDeck()->getCount());
        
        $this->object->shuffleDeck();
        $this->assertEquals(52, $this->object->getDeck()->getCount());
        
        $this->object->shuffleDeck();
        $this->assertEquals(52, $this->object->getDeck()->getCount());
    }
    
    public function testGetAllCardsFromDeck() {
        $this->object->shuffleDeck();
        $myStack = new \Application\Structures\CardStack();
        
        while ($this->object->getDeck()->getCount()) {
            $myStack->addCard($this->object->dealCard());
        }
        
        $this->assertEquals(0, $this->object->getDeck()->getCount());
        $this->assertEquals(52, $myStack->getCount());
        
        $this->object->shuffleDeck();
        $this->assertEquals(52, $this->object->getDeck()->getCount());
    }
}
