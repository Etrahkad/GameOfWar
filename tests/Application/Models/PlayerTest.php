<?php

namespace Application\Models;

use Application\Models\Card;
use Application\Types\Card as CardType;
use Application\Types\Suit as CardSuit;
use Application\Models\Deck;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-04-10 at 09:00:45.
 */
class PlayerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Player
     */
    protected $object;
    /**
     *
     * @var \Application\Models\Deck 
     */
    protected $deck;
    
    /**
     * @var \Application\Structures\CardStack
     */
    protected $discardStack;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Player;
        $this->deck = new Deck();
        $this->deck->createDeck();
        $this->discardStack = new \Application\Structures\CardStack();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Application\Models\Player::playCard
     * @todo   Implement testPlayCard().
     */
    public function testPlayCard() {
        $deckArray = $this->deck->getArray();
        
        $cardOne = $deckArray[0];
        $cardTwo = $deckArray[1];
        
        $this->discardStack->addCard($deckArray[0]);
        $this->discardStack->addCard($deckArray[1]);
        
        $this->object->setDeck($this->discardStack);
        
        $this->assertEquals($cardOne, $this->object->playCard());
        $this->assertEquals($cardTwo, $this->object->playCard());
    }

    /**
     * @covers Application\Models\Player::winCards
     * @todo   Implement testWinCards().
     */
    public function testWinCards() {
        $deckArray = $this->deck->getArray();
        
        $cardOne = $deckArray[0];
        $cardTwo = $deckArray[1];
        
        $this->discardStack->addCard($deckArray[0]);
        $this->discardStack->addCard($deckArray[1]);
        
        $this->object->setDeck($this->discardStack);
        
        $this->assertEquals(2, $this->object->getDeck()->getCount());
        
        $pile = new \Application\Structures\Pile();
        $pile->placeOnPile($deckArray[2]);
        $pile->placeOnPile($deckArray[3]);
        
        $this->object->winCards($pile->getPile());
        
        $this->assertEquals(4, $this->object->getDeck()->getCount());
    }

    /**
     * @covers Application\Models\Player::setDeck
     * @todo   Implement testSetDeck().
     */
    public function testSetDeck() {
        $this->object->setDeck($this->deck);
    }

    /**
     * @covers Application\Models\Player::getName
     * @todo   Implement testGetName().
     */
    public function testGetName() {
        $this->assertEquals('', $this->object->getName());
    }

    /**
     * @covers Application\Models\Player::setName
     * @todo   Implement testSetName().
     */
    public function testSetName() {
        $name = 'Name';
        
        $this->object->setName($name);
        $this->assertEquals($name, $this->object->getName());
    }

}
