<?php

namespace Application\Controller;

use Application\Controller\Log;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-04-10 at 18:11:37.
 */
class GameTest extends \PHPUnit_Framework_TestCase {
    
    /**
     * @var Game
     */
    protected $object;
    /**
     * @var \Application\Models\Round 
     */
    protected $round;
    /**
     * @var \Application\Models\Deck 
     */
    protected $deck;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Game;
        $this->round = new \Application\Models\Round();
        $this->deck = new \Application\Models\Deck();
        $this->deck->createDeck();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    
    public function testPlayRoundVictor1() {
        $pile1 = $this->round->getPile(1);
        $pile2 = $this->round->getPile(2);
        
        $player1 = $this->object->getPlayer(1);
        $player2 = $this->object->getPlayer(2);
        
        $pile1->placeOnPile($this->deck->getArray()[5]); 
        $pile1->placeOnPile($this->deck->getArray()[6]); 
        
        $player1->setDeck($pile1->getPile());
        
        $pile2->placeOnPile($this->deck->getArray()[4]); 
        $pile2->placeOnPile($this->deck->getArray()[3]); 
        
        $player2->setDeck($pile2->getPile());
        
        $this->assertEquals(2, $player1->getDeck()->getCount());
        $this->assertEquals(2, $player2->getDeck()->getCount());
        
        $round1 = new \Application\Models\Round();
        $victor = $this->object->playRound($round1);
        $this->assertSame(1, $round1->getVictorNumber());
        $this->assertEquals(3, $player1->getDeck()->getCount());
        
        $round2 = new \Application\Models\Round();
        $victor = $this->object->playRound($round2);
        $this->assertSame(1, $round2->getVictorNumber());
        $this->assertEquals(4, $player1->getDeck()->getCount());
    }
    
    public function testPlayRoundVictor2() {
        $pile1 = $this->round->getPile(1);
        $pile2 = $this->round->getPile(2);
        
        $player1 = $this->object->getPlayer(1);
        $player2 = $this->object->getPlayer(2);
        
        $pile1->placeOnPile($this->deck->getArray()[4]); 
        $pile1->placeOnPile($this->deck->getArray()[2]); 
        
        $player1->setDeck($pile1->getPile());
        
        $pile2->placeOnPile($this->deck->getArray()[5]); 
        $pile2->placeOnPile($this->deck->getArray()[6]); 
        
        $player2->setDeck($pile2->getPile());
        
        $this->assertEquals(2, $player1->getDeck()->getCount());
        $this->assertEquals(2, $player2->getDeck()->getCount());
        
        $victor = $this->object->playRound();
        $this->assertEquals(1, $player1->getDeck()->getCount());
        
        $victor = $this->object->playRound();
        $this->assertEquals(0, $player1->getDeck()->getCount());
    }
    
    public function testWarVictor1() {
        $pile1 = $this->round->getPile(1);
        $pile2 = $this->round->getPile(2);
        
        $player1 = $this->object->getPlayer(1);
        $player2 = $this->object->getPlayer(2);
        
        $pile1->placeOnPile($this->deck->getArray()[4]); 
        $pile1->placeOnPile($this->deck->getArray()[4]); 
        $pile1->placeOnPile($this->deck->getArray()[4]); 
        $pile1->placeOnPile($this->deck->getArray()[6]); 
        
        $player1->setDeck($pile1->getPile());
        
        $pile2->placeOnPile($this->deck->getArray()[4]); 
        $pile2->placeOnPile($this->deck->getArray()[4]); 
        $pile2->placeOnPile($this->deck->getArray()[4]); 
        $pile2->placeOnPile($this->deck->getArray()[4]); 
        
        $player2->setDeck($pile2->getPile());
        
        $this->assertEquals(2, $player1->getDeck()->getCount());
        $this->assertEquals(2, $player2->getDeck()->getCount());
        
        $victor = $this->object->playRound();
        $this->assertEquals(1, $player1->getDeck()->getCount());
    }
    
    /**
     * @covers Application\Controller\Game::playRound
     */
    public function testRound() {
        $round = $this->round;
        
        $pile1 = $round->getPile(1);
        $pile2 = $round->getPile(2);
        
        $card1 = $this->deck->getArray()[0];
        $card2 = $this->deck->getArray()[1];
        $card3 = $this->deck->getArray()[2];
        
        $pile1->placeOnPile($card1);
        $pile1->placeOnPile($card2);
        
        $pile2->placeOnPile($card2);
        $pile2->placeOnPile($card1);
        
        $found = $this->object->calculateRoundWinner($round);
        $this->assertEquals(1, $found); // Victory should be player 1
        $round->setRoundNumber(1);
        
//        var_dump(array(
//            $round->__toString(),
//            $pile1->getPile()->getTopCard()->__toString(),
//            $pile2->getPile()->getTopCard()->__toString()
//        ));
        
        $pile1->placeOnPile($card2);
        $pile2->placeOnPile($card3);
        $found = $this->object->calculateRoundWinner($round);
        
        $round->setRoundNumber(2);
//        var_dump(array(
//            $round->__toString(),
//            $pile1->getPile()->getTopCard()->__toString(),
//            $pile2->getPile()->getTopCard()->__toString()
//        ));
        
        $this->assertEquals(2, $found); // Victory should be player 2
        
        $pile1->placeOnPile($card2);
        $pile2->placeOnPile($card2);
        $found = $this->object->calculateRoundWinner($round);
        
        $round->setRoundNumber(3);
//        var_dump(array(
//            $round->__toString(),
//            $pile1->getPile()->getTopCard()->__toString(),
//            $pile2->getPile()->getTopCard()->__toString()
//        ));
        
        $this->assertEquals(0, $found); // Victory should be a draw
    }

    /**
     * @covers Application\Controller\Game::run
     * @todo   Implement testRun().
     */
    public function testRun() {
        $this->object->run();
    }
    

}
